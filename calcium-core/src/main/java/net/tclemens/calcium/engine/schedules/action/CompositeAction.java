/*
 * Copyright (C) 2017 Tim Clemens
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.tclemens.calcium.engine.schedules.action;

import android.support.annotation.NonNull;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

import net.tclemens.calcium.engine.updates.event.Event;

/**
 * This class represents a composite of one or more actions
 *
 * @author Tim Clemens
 */
final class CompositeAction extends Action {

    /** The composite actions */
    private final Collection<Action> actions;

    /** The events generated by the actions */
    private final Collection<Event> events;

    /**
     * @param actions The composite actions
     */
    CompositeAction(Collection<Action> actions, Collection<Event> events) {

        this.actions = actions;
        this.events = events;
    }

    @NonNull
    @Override
    public final Collection<Event> getEvents() {

        return events;
    }

    @Override
    public final boolean isPending() {

        return true;
    }

    @NonNull
    @Override
    public final Action update(long time) {

        Collection<Action> actions = new ArrayList<>(this.actions.size());
        Collection<Event> events = new ArrayList<>();

        for (Action action : this.actions) {

            action = action.update(time);

            if (action.isPending()) {

                actions.add(action);
            }

            events.addAll(action.getEvents());
        }

        if (actions.isEmpty()) {

            return ActionFactory.buildComplete();
        }

        actions = Collections.unmodifiableCollection(actions);
        events = Collections.unmodifiableCollection(events);

        return ActionFactory.buildComposite(actions, events);
    }
}
